#!/usr/bin/env node
const dotenv = require('dotenv');
const debug = require('debug')('webHosting');
const http = require('http');
const path = require('path');
const log4js = require('log4js');
const app = require('../src/app');

/**
 * App base dir
 */
let baseDir = process.cwd();
if (process.cwd().endsWith('bin')) {
    console.log("No direct access allowed, To run the server please run npm start command.");
    exit(1);
}
app.set('baseDir', baseDir);

/** init .env file
*/
const envLoad = dotenv.config({ path: path.join(app.get('baseDir'), 'config', '.env'), debug: process.env.DEBUG});
if (envLoad.error) {
   throw envLoad.error
}

/**
 * make a log directory, just in case it isn't there.
 */
try {
    require('fs').mkdirSync(path.join(app.get('baseDir'), 'log'));
} catch (e) {
    if (e.code != 'EEXIST') {
        console.error('Could not set up log directory, error was: ', e);
        process.exit(1);
    }
}

/**
 * Initialise log4js first, so we don't miss any log messages
 */

log4js.configure(path.join(app.get('baseDir'), 'config', 'log4js.json'));
const log = log4js.getLogger('main');



/**
 * Setting server port
 */
const port = process.env.PORT;

if (typeof (port) === 'undefined' || port === '') {
    throw new Error('No port defined');
}
app.set('port', port);

/**
 * Create http server
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Handles server error on startup
 * @param {string} error Error message passed by the server
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    // eslint-disable-next-line max-len
    log.info('Express server listening on port ', server.address().port, ' with pid ', process.pid);
}

/**
 * Closing all db connection and other connection for graceful shutdown
 */
process.on('SIGINT', async function () {
    log.info('Shutting down application');
    console.log('Pleasde wait, process is shutting down');
    exit(0);
});

/**
 * Handles process exit
 * @param {number} code exit code
 */
function exit(code) {
    console.log('Shutting down process with exit code ' + code);
    console.log('Bye bye');
    process.exit(code);
}
